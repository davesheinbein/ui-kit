@use '../../styles/mixins' as mixins;

// ========================================
// Base Wrapper Styles
// ========================================

.Wrapper {
	position: relative;
	display: block;
	box-sizing: border-box;
	overflow: hidden;
	padding: var(--wrapper-padding, 1rem); // Default 16px
	background: var(--wrapper-bg, var(--color-surface, #fff));
	border-radius: var(
		--wrapper-radius,
		var(--radius-md, 12px)
	);
	min-width: 0;
	box-shadow: var(
		--wrapper-shadow,
		0 1px 4px rgba(0, 0, 0, 0.04)
	);
	transition:
		box-shadow 0.2s,
		background 0.2s;

	@media (max-width: 640px) {
		padding: var(
			--wrapper-padding-mobile,
			0.5rem
		); // Default 8px
	}

	&[data-wrapper-kind] {
		// Debug styling in development only
		&::before {
			content: 'Wrapper: ' attr(data-wrapper-kind);
			@include mixins.absolute-position(-20px, 0);
			@include mixins.text-xs;
			color: var(--text-tertiary);
			background: var(--bg-muted);
			padding: var(--spacing-1);
			border-radius: var(--radius-sm);
			z-index: var(--z-debug);
			pointer-events: none;
			opacity: 0;
			@include mixins.smooth-transition(opacity);
		}

		&:hover::before {
			opacity: 1;
		}
	}
}

// Utility: elevated wrapper
.wrapper--elevated {
	box-shadow:
		0 4px 16px rgba(0, 0, 0, 0.1),
		0 1.5px 4px rgba(0, 0, 0, 0.06);
	background: var(--color-surface-elevated, #f9fafb);
}

// ========================================
// Wrapper Variants
// ========================================

.wrapper--simplified-interface {
	// Styles for simplified interface wrappers
	// Usually no additional styling needed - maintains clean interface
	position: relative;
}

.wrapper--enhanced-functionality {
	// Styles for enhanced functionality wrappers
	&::after {
		content: 'âœ¨';
		@include mixins.absolute-position(0, 0);
		@include mixins.text-xs;
		opacity: 0.5;
		pointer-events: none;
	}
}

.wrapper--provider-wrapper {
	// Styles for provider wrappers
	// Usually invisible
	display: contents;
	padding: 0;
}

.wrapper--component-wrapper {
	// Styles for component wrappers
	// Usually minimal styling to maintain component integrity
	position: relative;
	overflow: hidden; // Ensure component content doesn't overflow
	box-sizing: border-box;
	padding: var(
		--wrapper-component-padding,
		1rem
	); // Default 16px

	@media (max-width: 640px) {
		padding: var(
			--wrapper-component-padding-mobile,
			0.5rem
		); // Default 8px
	}
}

.wrapper--layout-container {
	// Base styles for layout containers
	box-sizing: border-box;
	padding: var(
		--wrapper-layout-padding,
		1.25rem
	); // Default 20px

	@media (max-width: 640px) {
		padding: var(
			--wrapper-layout-padding-mobile,
			0.75rem
		); // Default 12px
	}

	// Ensure containers take full available space
	&[data-wrapper='flex-container'] {
		width: 100%;

		// Default flex container styles
		&:not([style*='min-height']) {
			min-height: 200px; // Default minimum height
		}
	}

	&[data-wrapper='grid-container'] {
		width: 100%;

		// Default grid container styles
		&:not([style*='min-height']) {
			min-height: 200px; // Default minimum height
		}
	}

	&[data-wrapper='center-container'] {
		width: 100%;

		// Default center container styles
		&:not([style*='min-height']) {
			min-height: 300px; // Taller default for centering
		}
	}

	&[data-wrapper='stack-container'] {
		width: 100%;

		// Default stack container styles - no minimum height needed
	}
}

// ========================================
// Wrapper Layouts
// ========================================

.wrapper--passthrough {
	// Passthrough layout - transparent wrapper
	display: contents;
}

.wrapper--enhanced {
	// Enhanced layout - may add visual enhancements
	position: relative;
}

.wrapper--simplified {
	// Simplified layout - may hide complexity
	overflow: hidden;
}

.wrapper--decorated {
	// Decorated layout - adds visual decorations
	position: relative;

	&::before,
	&::after {
		content: '';
		position: absolute;
		pointer-events: none;
	}
}

// ========================================
// Component-Specific Wrapper Styles
// ========================================

// Button Wrappers
.Wrapper[data-wrapper-kind*='button'] {
	display: inline-block;
}

// Header Wrappers
.Wrapper[data-wrapper-kind*='header'] {
	display: block;
	width: 100%;
}

// Modal Wrappers
.Wrapper[data-wrapper-kind*='modal'] {
	position: fixed;
	inset: 0;
	z-index: 1000;
}

// Grid Wrappers
.Wrapper[data-wrapper-kind*='grid'] {
	display: block;
}

// Page Wrappers
.Wrapper[data-wrapper-kind*='page'] {
	display: block;
	min-height: 100vh;
}

// Sidebar Wrappers
.Wrapper[data-wrapper-kind*='sidebar'] {
	position: fixed;
	top: 0;
	height: 100vh;
	z-index: 100;
}

// Provider Wrappers
.Wrapper[data-wrapper-kind*='provider'] {
	display: contents;
}

// ========================================
// Responsive Wrapper Styles
// ========================================

@media (max-width: 768px) {
	.Wrapper {
		// Mobile-specific wrapper adjustments

		&::before {
			// Hide debug info on mobile
			display: none;
		}
	}
}

// ========================================
// Development vs Production Styles
// ========================================

// Development-only styles (when debug mode is on)
.Wrapper[data-debug='true'] {
	&::before {
		opacity: 1;
		background: #ff6b6b;
		color: white;
	}
}

// Production styles (clean, minimal)
.Wrapper[data-production='true'] {
	&::before,
	&::after {
		display: none;
	}
}

// ========================================
// Accessibility Enhancements
// ========================================

.Wrapper {
	// Ensure wrappers don't interfere with screen readers
	&[aria-hidden='true'] {
		display: none;
	}
}

// Reduced motion support
@media (prefers-reduced-motion: reduce) {
	.Wrapper,
	.migrationHelper,
	.migrationButton {
		transition: none;
		animation: none;
	}

	.migrationButton:hover {
		transform: none;
	}
}

// ========================================
// Print Styles
// ========================================

@media print {
	.Wrapper {
		&::before,
		&::after {
			display: none;
		}
	}

	.migrationHelper {
		display: none;
	}
}

// No changes needed for outside click in SCSS. This must be handled in the Sidebar or Wrapper component logic (TSX), not in styles.
