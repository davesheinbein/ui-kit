@use '../../styles/Variables.scss' as *;
@use '../../styles/mixins.scss' as *;

// ========================================
// Base Wrapper Styles
// ========================================

.unifiedWrapper {
	position: relative;
	display: contents; // Allows wrapper to be transparent in layout
	
	&[data-wrapper-kind] {
		// Debug styling in development
		&::before {
			content: 'Wrapper: ' attr(data-wrapper-kind);
			position: absolute;
			top: -20px;
			left: 0;
			font-size: 10px;
			color: #888;
			background: #f0f0f0;
			padding: 2px 4px;
			border-radius: 2px;
			z-index: 9999;
			pointer-events: none;
			opacity: 0;
			transition: opacity 0.2s;
		}
		
		&:hover::before {
			opacity: 1;
		}
	}
}

// ========================================
// Wrapper Variants
// ========================================

.wrapper--backward-compatibility {
	// Styles for backward compatibility wrappers
	.migrationHelper {
		position: absolute;
		top: 0;
		right: 0;
		z-index: 10000;
	}
}

.wrapper--simplified-interface {
	// Styles for simplified interface wrappers
	// Usually no additional styling needed - maintains clean interface
	position: relative;
}

.wrapper--enhanced-functionality {
	// Styles for enhanced functionality wrappers
	&::after {
		content: '✨';
		position: absolute;
		top: 0;
		right: 0;
		font-size: 12px;
		opacity: 0.5;
		pointer-events: none;
	}
}

.wrapper--legacy-support {
	// Styles for legacy support wrappers
	border: 1px dashed orange;
	border-radius: 4px;
	padding: 2px;
	
	&::before {
		content: '⚠️ Legacy';
		position: absolute;
		top: -12px;
		left: 0;
		font-size: 10px;
		color: orange;
		background: white;
		padding: 1px 3px;
		border-radius: 2px;
		z-index: 10001;
	}
}

.wrapper--provider-wrapper {
	// Styles for provider wrappers
	// Usually invisible
	display: contents;
}

.wrapper--component-wrapper {
	// Styles for component wrappers
	// Usually minimal styling to maintain component integrity
	position: relative;
}

.wrapper--layout-container {
	// Base styles for layout containers
	box-sizing: border-box;
	
	// Ensure containers take full available space
	&[data-wrapper="flex-container"] {
		width: 100%;
		
		// Default flex container styles
		&:not([style*="min-height"]) {
			min-height: 200px; // Default minimum height
		}
	}
	
	&[data-wrapper="grid-container"] {
		width: 100%;
		
		// Default grid container styles
		&:not([style*="min-height"]) {
			min-height: 200px; // Default minimum height
		}
	}
	
	&[data-wrapper="center-container"] {
		width: 100%;
		
		// Default center container styles
		&:not([style*="min-height"]) {
			min-height: 300px; // Taller default for centering
		}
	}
	
	&[data-wrapper="stack-container"] {
		width: 100%;
		
		// Default stack container styles - no minimum height needed
	}
}

// ========================================
// Wrapper Layouts
// ========================================

.wrapper--passthrough {
	// Passthrough layout - transparent wrapper
	display: contents;
}

.wrapper--enhanced {
	// Enhanced layout - may add visual enhancements
	position: relative;
}

.wrapper--simplified {
	// Simplified layout - may hide complexity
	overflow: hidden;
}

.wrapper--decorated {
	// Decorated layout - adds visual decorations
	position: relative;
	
	&::before,
	&::after {
		content: '';
		position: absolute;
		pointer-events: none;
	}
}

// ========================================
// Migration Helper Styles
// ========================================

.migrationHelper {
	position: absolute;
	top: -30px;
	right: 0;
	z-index: 10000;
	opacity: 0;
	transform: translateY(-10px);
	transition: all 0.2s ease;
	
	.unifiedWrapper:hover & {
		opacity: 1;
		transform: translateY(0);
	}
}

.migrationButton {
	@include button-base;
	background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
	color: white;
	border: none;
	padding: 4px 8px;
	font-size: 10px;
	border-radius: 12px;
	cursor: pointer;
	white-space: nowrap;
	box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
	
	&:hover {
		background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);
		transform: translateY(-1px);
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
	}
	
	&:active {
		transform: translateY(0);
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
	}
}

// ========================================
// Component-Specific Wrapper Styles
// ========================================

// Button Wrappers
.unifiedWrapper[data-wrapper-kind*="button"] {
	display: inline-block;
}

// Header Wrappers
.unifiedWrapper[data-wrapper-kind*="header"] {
	display: block;
	width: 100%;
}

// Modal Wrappers
.unifiedWrapper[data-wrapper-kind*="modal"] {
	position: fixed;
	inset: 0;
	z-index: 1000;
}

// Grid Wrappers
.unifiedWrapper[data-wrapper-kind*="grid"] {
	display: block;
}

// Page Wrappers
.unifiedWrapper[data-wrapper-kind*="page"] {
	display: block;
	min-height: 100vh;
}

// Sidebar Wrappers
.unifiedWrapper[data-wrapper-kind*="sidebar"] {
	position: fixed;
	top: 0;
	height: 100vh;
	z-index: 100;
}

// Provider Wrappers
.unifiedWrapper[data-wrapper-kind*="provider"] {
	display: contents;
}

// ========================================
// Responsive Wrapper Styles
// ========================================

@media (max-width: 768px) {
	.unifiedWrapper {
		// Mobile-specific wrapper adjustments
		
		&::before {
			// Hide debug info on mobile
			display: none;
		}
	}
	
	.migrationHelper {
		// Make migration helper more accessible on mobile
		position: fixed;
		top: 10px;
		right: 10px;
		opacity: 0.8;
		transform: none;
	}
	
	.migrationButton {
		padding: 8px 12px;
		font-size: 12px;
	}
}

// ========================================
// Development vs Production Styles
// ========================================

// Development-only styles (when debug mode is on)
.unifiedWrapper[data-debug="true"] {
	&::before {
		opacity: 1;
		background: #ff6b6b;
		color: white;
	}
	
	&[data-wrapper-kind*="legacy"] {
		animation: legacy-warning 2s infinite;
	}
}

@keyframes legacy-warning {
	0%, 100% { 
		border-color: orange; 
		background: transparent;
	}
	50% { 
		border-color: #ff6b6b; 
		background: rgba(255, 107, 107, 0.1);
	}
}

// Production styles (clean, minimal)
.unifiedWrapper[data-production="true"] {
	&::before,
	&::after {
		display: none;
	}
	
	.migrationHelper {
		display: none;
	}
	
	&[data-wrapper-kind*="legacy"] {
		border: none;
		animation: none;
	}
}

// ========================================
// Accessibility Enhancements
// ========================================

.unifiedWrapper {
	// Ensure wrappers don't interfere with screen readers
	&[aria-hidden="true"] {
		display: none;
	}
	
	// Focus management
	&:focus-within {
		.migrationHelper {
			opacity: 1;
			transform: translateY(0);
		}
	}
}

// High contrast mode support
@media (prefers-contrast: high) {
	.wrapper--legacy-support {
		border-color: #000;
		
		&::before {
			color: #000;
			background: #fff;
			border: 1px solid #000;
		}
	}
	
	.migrationButton {
		background: #000;
		color: #fff;
		border: 1px solid #fff;
	}
}

// Reduced motion support
@media (prefers-reduced-motion: reduce) {
	.unifiedWrapper,
	.migrationHelper,
	.migrationButton {
		transition: none;
		animation: none;
	}
	
	.migrationButton:hover {
		transform: none;
	}
}

// ========================================
// Print Styles
// ========================================

@media print {
	.unifiedWrapper {
		&::before,
		&::after {
			display: none;
		}
	}
	
	.migrationHelper {
		display: none;
	}
	
	.wrapper--legacy-support {
		border: none;
		
		&::before {
			display: none;
		}
	}
}
